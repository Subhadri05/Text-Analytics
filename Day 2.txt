> show dbs
Output:
admin   0.000GB
config  0.000GB
local   0.000GB
movies  0.000GB
> use movies
Output:
switched to db movies
> show collections
Output:
movie

Question:Insert the following document in collection:
> db.movie.insert({'name':'Charlie','tags':['comedy','drama'],'language':'English','year':1960})
Output:
WriteResult({ "nInserted" : 1 })
> db.movie.find()
Output:
{ "_id" : ObjectId("5e1573978ab6f0234b9f4b7f"), "name" : "KKIY", "genre" : [ "comedy", "drama" ] }
{ "_id" : ObjectId("5e1573978ab6f0234b9f4b80"), "name" : "3idiots", "genre" : [ "comedy", "drama" ] }
{ "_id" : ObjectId("5e15782c8ab6f0234b9f4b82"), "name" : "Mission Impossible", "genre" : [ "action" ] }
{ "_id" : ObjectId("5e16a1880f970a3c5597a3e9"), "name" : "Charlie", "tags" : [ "comedy", "drama" ], "language" : "English", "year" : 1960 }

Question:Update the year 1960 to 1962:
> db.movie.updateMany({'year':1960},{$set:{'year':1962}})
Output:
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.movie.find()
Output:
{ "_id" : ObjectId("5e1573978ab6f0234b9f4b7f"), "name" : "KKIY", "genre" : [ "comedy", "drama" ] }
{ "_id" : ObjectId("5e1573978ab6f0234b9f4b80"), "name" : "3idiots", "genre" : [ "comedy", "drama" ] }
{ "_id" : ObjectId("5e15782c8ab6f0234b9f4b82"), "name" : "Mission Impossible", "genre" : [ "action" ] }
{ "_id" : ObjectId("5e16a1880f970a3c5597a3e9"), "name" : "Charlie", "tags" : [ "comedy", "drama" ], "language" : "English", "year" : 1962 }

Question:List all the fields and documents of movie using pretty method:
> db.movie.find().pretty()
Output:
{
        "_id" : ObjectId("5e1573978ab6f0234b9f4b7f"),
        "name" : "KKIY",
        "genre" : [
                "comedy",
                "drama"
        ]
}
{
        "_id" : ObjectId("5e1573978ab6f0234b9f4b80"),
        "name" : "3idiots",
        "genre" : [
                "comedy",
                "drama"
        ]
}
{
        "_id" : ObjectId("5e15782c8ab6f0234b9f4b82"),
        "name" : "Mission Impossible",
        "genre" : [
                "action"
        ]
}
{
        "_id" : ObjectId("5e16a1880f970a3c5597a3e9"),
        "name" : "Charlie",
        "tags" : [
                "comedy",
                "drama"
        ],
        "language" : "English",
        "year" : 1962
}

Question:List all the movie names which are release after year 2000:
> db.movie.find({'year':{$gt:2000}},{'_id':0,'name':1})
Output:
{ "name" : "3idiots" }

Question:List all the names of comedy movies:
> db.movie.find({'tags':'comedy'},{'_id':0,'name':1})
Output:
{ "name" : "Charlie" }

Question:List only the second record:
> db.movie.find().limit(1).skip(1)
Output:
{ "_id" : ObjectId("5e1573978ab6f0234b9f4b80"), "name" : "3idiots", "genre" : [ "comedy", "drama" ], "year" : 2010 }
-----------------------------------------------------------------------------------------------------------------------------------------------------------

Load MovieDetailsDataset:
========================================================================
Step1: View the dbs:
> show dbs
Output:
admin   0.000GB
config  0.000GB
local   0.000GB
movies  0.000GB

Step2: Use a particular db:
> use movies
Output:
switched to db movies

Step3: Placing the json file:
Place the "loadMovieDetailsDataset" json file in "C:\Users\Srishti\" path.

Step4:Load the data in mongo:
> load('C:/Users/Srishti/loadMovieDetailsDataset.js')
Output:
true

Step5:View newly created db:
> show dbs
Output:
admin   0.000GB
config  0.000GB
local   0.000GB
movies  0.000GB
video   0.000GB

Step6:Use required db:
> use video
Output:
switched to db video

Step7:View the collection which is supposed to be used:
> show collections
Output:
movieDetails

Step8:View one row of data or 1 document from the collection:
> db.movieDetails.findOne()
{
        "_id" : ObjectId("5e16c42b0f970a3c5597a3ea"),
        "title" : "Once Upon a Time in the West",
        "year" : 1968,
        "rated" : "PG-13",
        "runtime" : 175,
        "countries" : [
                "Italy",
                "USA",
                "Spain"
        ],
        "genres" : [
                "Western"
        ],
        "director" : "Sergio Leone",
        "writers" : [
                "Sergio Donati",
                "Sergio Leone",
                "Dario Argento",
                "Bernardo Bertolucci",
                "Sergio Leone"
        ],
        "actors" : [
                "Claudia Cardinale",
                "Henry Fonda",
                "Jason Robards",
                "Charles Bronson"
        ],
        "plot" : "Epic story of a mysterious stranger with a harmonica who joins forces with a notorious desperado to protect a beautiful widow from a ruthless assassin working for the railroad.",
        "poster" : "http://ia.media-imdb.com/images/M/MV5BMTEyODQzNDkzNjVeQTJeQWpwZ15BbWU4MDgyODk1NDEx._V1_SX300.jpg",
        "imdb" : {
                "id" : "tt0064116",
                "rating" : 8.6,
                "votes" : 201283
        },
        "tomato" : {
                "meter" : 98,
                "image" : "certified",
                "rating" : 9,
                "reviews" : 54,
                "fresh" : 53,
                "consensus" : "A landmark Sergio Leone spaghetti western masterpiece featuring a classic Morricone score.",
                "userMeter" : 95,
                "userRating" : 4.3,
                "userReviews" : 64006
        },
        "metacritic" : 80,
        "awards" : {
                "wins" : 4,
                "nominations" : 5,
                "text" : "4 wins & 5 nominations."
        },
        "type" : "movie"
}

Question1:Display the director name in ascending order:
> db.movieDetails.find().sort({director:1}).limit(1)
Output:
{ "_id" : ObjectId("5e16c42b0f970a3c5597a553"), "title" : "AC/DC: Highway to Hell - Classic Album Under Review", "year" : 2008, "rated" : null, "runtime" : 76, "countries" : [ "USA" ], "genres" : [ "Documentary", "Music" ], "director" : null, "writers" : [ ], "actors" : [ "Bon Scott", "Angus Young" ], "plot" : "This film puts the album Back In Black under the spotlight and with the help of those who worked on the record, friends of Bon Scott, AC/ DC biographers and others who were there at the ...", "poster" : "http://ia.media-imdb.com/images/M/MV5BMjExOTY3NjMyNV5BMl5BanBnXkFtZTgwMjczMjA2MDE@._V1_SX300.jpg", "imdb" : { "id" : "tt1179370", "rating" : 8.1, "votes" : 44 }, "awards" : { "wins" : 0, "nominations" : 0, "text" : "" }, "type" : "movie" }

Question2:Display only the director name.
> db.movieDetails.find({},{'_id':0,director:1}).limit(1)
Output:
{ "director" : "Sergio Leone" }

OR
> db.movieDetails.find({director:{$exists:true}},{'_id':0,director:1}).limit(1)
Output:
{ "director" : "Sergio Leone" }

OR
> > db.movieDetails.find({director:{$exists:true}}).limit(1)
{ "_id" : ObjectId("5e16c42b0f970a3c5597a3ea"), "title" : "Once Upon a Time in the West", "year" : 1968, "rated" : "PG-13", "runtime" : 175, "countries" : [ "Italy", "USA", "Spain" ], "genres" : [ "Western" ], "director" : "Sergio Leone", "writers" : [ "Sergio Donati", "Sergio Leone", "Dario Argento", "Bernardo Bertolucci", "Sergio Leone" ], "actors" : [ "Claudia Cardinale", "Henry Fonda", "Jason Robards", "Charles Bronson" ], "plot" : "Epic story of a mysterious stranger with a harmonica who joins forces with a notorious desperado to protect a beautiful widow from a ruthless assassin working for the railroad.", "poster" : "http://ia.media-imdb.com/images/M/MV5BMTEyODQzNDkzNjVeQTJeQWpwZ15BbWU4MDgyODk1NDEx._V1_SX300.jpg", "imdb" : { "id" : "tt0064116", "rating" : 8.6, "votes" : 201283 }, "tomato" : { "meter" : 98, "image" : "certified", "rating" : 9, "reviews" : 54, "fresh" : 53, "consensus" : "A landmark Sergio Leone spaghetti western masterpiece featuring a classic Morricone score.", "userMeter" : 95, "userRating" : 4.3, "userReviews" : 64006 }, "metacritic" : 80, "awards" : { "wins" : 4, "nominations" : 5, "text" : "4 wins & 5 nominations." }, "type" : "movie" }

Question3:Arrange the director name in ascending order without any null values:
> db.movieDetails.find({director:{$ne:null}},{'_id':0,director:1}).sort({director:1}).limit(1)
Output:
{ "director" : "'Bill' William Sollner" }

Question4:For every year, find the movie that has the max. runtime:
> db.movieDetails.aggregate([{$group:{_id:'$year',movie:{$max:'$runtime'}}},{$project:{}}])
OR
> db.movieDetails.aggregate([{$group:{_id:'$year',movie:{$max:'$runtime'}}},{$limit:10}])
Output:
{ "_id" : 1932, "movie" : 92 }
{ "_id" : 1926, "movie" : 78 }
{ "_id" : 1917, "movie" : null }
{ "_id" : 1920, "movie" : 67 }
{ "_id" : 1933, "movie" : 122 }
{ "_id" : 1939, "movie" : 129 }
{ "_id" : 1925, "movie" : 81 }
{ "_id" : 1943, "movie" : 92 }
{ "_id" : 1945, "movie" : 90 }
{ "_id" : 1935, "movie" : 98 }

Different Approach:
db.movieDetails.aggregate([{$group:{_id:{year:'$year',name:'$title'},movie:{$max:'$runtime'}}}])
{ "_id" : { "year" : 2012, "name" : "The Dream of Lu" }, "movie" : 106 }
{ "_id" : { "year" : 1989, "name" : "Lu bing hua" }, "movie" : null }
{ "_id" : { "year" : 2004, "name" : "The Life and Times of MC Beer Bong" }, "movie" : 85 }
{ "_id" : { "year" : 1954, "name" : "Lu tempu di li pisci spata" }, "movie" : 11 }
{ "_id" : { "year" : 1998, "name" : "M.C. Escher: Sky and Water 1" }, "movie" : 3 }
{ "_id" : { "year" : 1999, "name" : "Metamorphose: M.C. Escher, 1898-1972" }, "movie" : 60 }
{ "_id" : { "year" : 2013, "name" : "Mc Dandik" }, "movie" : 100 }
{ "_id" : { "year" : 2005, "name" : "The MC: Why We Do It" }, "movie" : 77 }
{ "_id" : { "year" : 1980, "name" : "The Fantastic World of M.C. Escher" }, "movie" : 50 }
{ "_id" : { "year" : 2006, "name" : "Metro ni notte" }, "movie" : 121 }
{ "_id" : { "year" : 2005, "name" : "Boku wa imouto ni koi wo suru: Secret sweethearts - Kono koi wa himitsu" }, "movie" : null }
{ "_id" : { "year" : 1905, "name" : "Peace Envoys at Portsmouth, N.H." }, "movie" : null }
{ "_id" : { "year" : 2007, "name" : "Lumberton, NC" }, "movie" : 9 }
{ "_id" : { "year" : 1994, "name" : "Tian guo ni zi" }, "movie" : 99 }
{ "_id" : { "year" : 2014, "name" : "NC Sixty" }, "movie" : null }
{ "_id" : { "year" : 2013, "name" : "Still Standing: The Real Story of the NC Textile Industry" }, "movie" : null }
{ "_id" : { "year" : 2014, "name" : "The Ballad of Brooklyn, NC" }, "movie" : 5 }
{ "_id" : { "year" : 2014, "name" : "Onward Notre Dame: ND in Indy" }, "movie" : null }
{ "_id" : { "year" : 2013, "name" : "NC Film Project Preview" }, "movie" : null }
{ "_id" : { "year" : 2009, "name" : "Fu(nd) This!" }, "movie" : 11 }

Just to get the movie name:
db.movieDetails.aggregate([{$group:{_id:{year:'$year',name:'$title'},movie:{$max:'$runtime'}}},{$project:{'_id.name':1}}])
{ "_id" : { "name" : "The Dream of Lu" } }
{ "_id" : { "name" : "Lu bing hua" } }
{ "_id" : { "name" : "The Life and Times of MC Beer Bong" } }
{ "_id" : { "name" : "Lu tempu di li pisci spata" } }
{ "_id" : { "name" : "M.C. Escher: Sky and Water 1" } }
{ "_id" : { "name" : "Metamorphose: M.C. Escher, 1898-1972" } }
{ "_id" : { "name" : "Mc Dandik" } }
{ "_id" : { "name" : "The MC: Why We Do It" } }
{ "_id" : { "name" : "The Fantastic World of M.C. Escher" } }
{ "_id" : { "name" : "Metro ni notte" } }
{ "_id" : { "name" : "Boku wa imouto ni koi wo suru: Secret sweethearts - Kono koi wa himitsu" } }
{ "_id" : { "name" : "Peace Envoys at Portsmouth, N.H." } }
{ "_id" : { "name" : "Lumberton, NC" } }
{ "_id" : { "name" : "Tian guo ni zi" } }
{ "_id" : { "name" : "NC Sixty" } }
{ "_id" : { "name" : "Still Standing: The Real Story of the NC Textile Industry" } }
{ "_id" : { "name" : "The Ballad of Brooklyn, NC" } }
{ "_id" : { "name" : "Onward Notre Dame: ND in Indy" } }
{ "_id" : { "name" : "NC Film Project Preview" } }
{ "_id" : { "name" : "Fu(nd) This!" } }

Question5:Distinct value in the 'type' column.
> db.movieDetails.distinct('type')
Output:
[ "movie" ]